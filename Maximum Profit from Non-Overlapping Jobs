def maxProfit(startTime, endTime, profit):
    jobs = sorted(zip(startTime, endTime, profit), key=lambda x: x[1])  # Sort jobs by end time
    n = len(jobs)
    
    dp = [0] * n
    dp[0] = jobs[0][2]  # Initialize dp for the first job
    
    for i in range(1, n):
        start_i, end_i, profit_i = jobs[i]
        dp[i] = max(dp[i-1], profit_i)  # If not taking current job
        
        # Find the last job that ends before the current job starts
        for j in range(i-1, -1, -1):
            start_j, end_j, profit_j = jobs[j]
            if end_j <= start_i:
                dp[i] = max(dp[i], dp[j] + profit_i)
                break
    
    return dp[-1]

# Example usage:
startTime = [1, 2, 3, 3]
endTime = [3, 4, 5, 6]
profit = [50, 10, 40, 70]

max_profit = maxProfit(startTime, endTime, profit)
print("Maximum profit without overlapping jobs:", max_profit)
